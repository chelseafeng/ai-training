# 智能训练项目 Cursor 规则

## 项目概述
这是一个基于FastAPI构建的银行核心业务系统智能配置助手。项目提供智能配置管理、规则引擎和业务配置服务。

## 技术栈
- **后端框架**: FastAPI
- **数据库**: PostgreSQL
- **缓存**: Redis
- **消息队列**: RabbitMQ
- **文件存储**: MinIO
- **容器化**: Docker
- **部署**: Kubernetes
- **Python版本**: 3.10.14

## 代码风格和标准

### Python代码风格
- 遵循PEP 8风格指南
- 为所有函数参数和返回值使用类型提示
- 为所有函数、类和模块使用文档字符串
- 优先使用f-strings而不是.format()或%格式化
- 使用有意义的变量和函数名称
- 保持函数小而专注，遵循单一职责原则

### FastAPI最佳实践
- 使用Pydantic模型进行请求/响应验证
- 实现适当的错误处理，使用自定义异常
- 使用依赖注入进行数据库连接和服务
- 遵循RESTful API设计原则
- 包含适当的API文档（OpenAPI/Swagger）

### 项目结构指南
- 遵循现有的分层架构：controller -> service -> dao -> model
- 将业务逻辑保持在service层
- 使用schemas进行数据验证和序列化
- 将工具函数放在utils目录中
- 保持各层之间的关注点分离

## AI助手行为

### 编写代码时
1. **始终使用类型提示** - 每个函数都应该有适当的类型注解
2. **包含文档字符串** - 记录目的、参数和返回值
3. **遵循现有模式** - 匹配项目中已有的编码风格和结构
4. **优雅地处理错误** - 使用try-catch块和自定义异常
5. **使用async/await** - 对I/O操作优先使用异步操作
6. **验证输入** - 使用Pydantic模型进行数据验证

### 审查代码时
1. **检查安全漏洞** - 验证所有输入，使用参数化查询
2. **确保适当的错误处理** - 查找缺失的异常处理
3. **验证类型安全** - 确保所有类型提示都正确完整
4. **检查性能** - 避免N+1查询，使用适当的缓存
5. **审查API设计** - 确保遵循RESTful原则

### 建议变更时
1. **解释原因** - 始终为建议的变更提供上下文
2. **考虑向后兼容性** - 确保变更不会破坏现有功能
3. **考虑可扩展性** - 考虑性能影响
4. **遵循项目模式** - 保持与现有代码的一致性

## 具体指南

### 数据库操作
- 使用异步数据库操作
- 实现适当的连接池
- 对多步操作使用事务
- 适当处理数据库错误

### 配置管理
- 使用环境变量进行配置
- 实现配置验证
- 支持不同环境（开发、测试、生产）
- 使用安全的配置实践

### 日志记录
- 使用loguru进行结构化日志记录
- 包含适当的日志级别
- 记录重要的业务事件
- 避免记录敏感信息

### 测试
- 为业务逻辑编写单元测试
- 使用pytest作为测试框架
- 模拟外部依赖
- 保持良好的测试覆盖率

### 安全
- 验证所有用户输入
- 使用参数化查询防止SQL注入
- 实现适当的身份验证和授权
- 遵循OWASP安全指南

## 文件命名约定
- Python文件和函数使用snake_case
- 类名使用PascalCase
- 常量使用UPPER_CASE
- 使用描述性名称表明用途

## 导入组织
1. 标准库导入
2. 第三方导入
3. 本地应用导入
4. 用空行分隔各组

## 文档
- 保持README.md更新
- 记录API端点
- 包含设置和部署说明
- 维护重要变更的变更日志

## 性能考虑
- 在适当的地方使用异步操作
- 为频繁访问的数据实现缓存
- 优化数据库查询
- 监控和分析性能瓶颈

记住：这是一个银行的生产系统，所以在所有代码变更中都要优先考虑安全性、可靠性和可维护性。 